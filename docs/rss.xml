<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Homery's blog</title><link>https://darcyjason.github.io</link><description>Summary for what I have learned.</description><copyright>Homery's blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://darcyjason.github.io</link></image><lastBuildDate>Wed, 26 Jun 2024 12:55:15 +0000</lastBuildDate><managingEditor>Homery's blog</managingEditor><ttl>60</ttl><webMaster>Homery's blog</webMaster><item><title>Algorithm</title><link>https://darcyjason.github.io/post/Algorithm.html</link><description># 顺序表/单链表。</description><guid isPermaLink="true">https://darcyjason.github.io/post/Algorithm.html</guid><pubDate>Wed, 26 Jun 2024 12:53:17 +0000</pubDate></item><item><title>Cloudflare CLI指南</title><link>https://darcyjason.github.io/post/Cloudflare%20CLI-zhi-nan.html</link><description># 使用Cloudflare（CLI）搭建Web应用&#13;
## 1.安装&#13;
根据官网安装Wrangler&#13;
&#13;
## 2.认证&#13;
首先创建个人API TOKEN，复制下来并保存在你认为比较安全的地方，因为其API TOKEN无法进行二次查看，请一定妥善保管&#13;
&#13;
再打开本地终端应用&#13;
`export CLOUDFLARE_API_TOKEN=YOUR_API_TOKEN`&#13;
&#13;
如果你使用的是Bash，则输入以下命令&#13;
`echo 'export CLOUDFLARE_API_TOKEN=YOUR_API_TOKEN' &gt;&gt; ~/.bashrc`&#13;
`source ~/.bashrc`&#13;
&#13;
如果你使用的是Zsh，则输入以下命令&#13;
`echo 'export CLOUDFLARE_API_TOKEN=YOUR_API_TOKEN' &gt;&gt; ~/.zshrc`&#13;
`source ~/.zshrc`&#13;
&#13;
**将以上命令中的YOUR_API_TOKEN全都替换成你刚创建的API TOKEN**&#13;
&#13;
## 3.使用&#13;
输入`npm create cloudflare@latest`命令，根据其提示信息选择并搭建你的Web框架应用，并将其部署到Cloudflare上&#13;
。</description><guid isPermaLink="true">https://darcyjason.github.io/post/Cloudflare%20CLI-zhi-nan.html</guid><pubDate>Tue, 25 Jun 2024 13:21:53 +0000</pubDate></item><item><title>CISSP官方学习手册</title><link>https://darcyjason.github.io/post/CISSP-guan-fang-xue-xi-shou-ce.html</link><description># CISSP官方学习手册&#13;
&#13;
## 第1章 实现安全治理的原则和策略&#13;
&#13;
## 第2章 人员安全和风险管理的概念&#13;
&#13;
## 第3章 业务连续性计划&#13;
&#13;
## 第4章 法律、法规和合规&#13;
&#13;
## 第5章 保护资产安全&#13;
&#13;
## 第6章 密码学和对称密钥算法&#13;
&#13;
## 第7章 PKI和密码应用&#13;
&#13;
## 第8章 安全模型、设计和能力的原则&#13;
&#13;
## 第9章 安全漏洞、威胁和对策&#13;
&#13;
## 第10章 物理安全要求&#13;
&#13;
## 第11章 安全网络架构和组件&#13;
&#13;
## 第12章 安全通信与网络攻击&#13;
&#13;
## 第13章 管理身份和认证&#13;
&#13;
## 第14章 控制和监控访问&#13;
&#13;
## 第15章 安全评估与测试&#13;
&#13;
## 第16章 安全运营管理&#13;
&#13;
## 第17章 事件的预防和响应&#13;
&#13;
## 第18章 灾难恢复计划&#13;
&#13;
## 第19章 调查和道德&#13;
&#13;
## 第20章 软件开发安全&#13;
&#13;
## 第21章 恶意代码和应用攻击&#13;
。</description><guid isPermaLink="true">https://darcyjason.github.io/post/CISSP-guan-fang-xue-xi-shou-ce.html</guid><pubDate>Sat, 22 Jun 2024 10:33:59 +0000</pubDate></item><item><title>PowerShell</title><link>https://darcyjason.github.io/post/PowerShell.html</link><description># PowerShell。</description><guid isPermaLink="true">https://darcyjason.github.io/post/PowerShell.html</guid><pubDate>Sat, 22 Jun 2024 09:51:14 +0000</pubDate></item><item><title>Linux Shell</title><link>https://darcyjason.github.io/post/Linux%20Shell.html</link><description># Linux Shell。</description><guid isPermaLink="true">https://darcyjason.github.io/post/Linux%20Shell.html</guid><pubDate>Sat, 22 Jun 2024 09:27:18 +0000</pubDate></item><item><title>GitHub CLI</title><link>https://darcyjason.github.io/post/GitHub%20CLI.html</link><description># GitHub CLI&#13;
&#13;
## 先决条件&#13;
&#13;
### 安装CLI&#13;
根据自身操作系统架构选择对应的CLI版本&#13;
&#13;
### 进行身份验证&#13;
`gh auth login`&#13;
&#13;
### 选择协议&#13;
根据提示选择Git协议为HTTPS或SSH（推荐选择HTTPS）&#13;
&#13;
## 常用命令&#13;
&#13;
### 1.查看状态&#13;
`gh status`&#13;
&#13;
### 2.克隆存储库&#13;
`gh repo clone OWNER/REPO` 将其存储库克隆到本地计算机中&#13;
&#13;
### 3.创建存储库&#13;
`gh repo create` 根据提示创建自己的存储库&#13;
&#13;
### 4.处理问题&#13;
`gh issue list --repo OWNER/REPO` 列出当前为指定存储库打开的最近创建的问题&#13;
若在本地Git存储库运行`issue`命令则可以省略--repo OWNER/REPO的命令&#13;
&#13;
### 5.处理拉取请求&#13;
`gh pr list --repo OWNER/REPO` 列出当前为指定存储库打开的最近创建的拉取请求&#13;
若在本地Git存储库运行`pr`命令则可以省略--repo OWNER/REPO的命令&#13;
&#13;
### 6.处理codespace&#13;
输入`gh codespace create`来根据提示创建新的codespace&#13;
输入`gh codespace list`来显示现有的codespace&#13;
可以用cs代替codespace&#13;
&#13;
### 7.获得帮助&#13;
输入`gh`显示顶级的GitHub CLI命令&#13;
对于具体的用法帮助，需要在后面增加--help&#13;
。</description><guid isPermaLink="true">https://darcyjason.github.io/post/GitHub%20CLI.html</guid><pubDate>Sat, 22 Jun 2024 06:54:01 +0000</pubDate></item></channel></rss>